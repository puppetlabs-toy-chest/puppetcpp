Notice: Scope(Class[main]): Integer[1, 1]
Notice: Scope(Class[main]): Integer[1, 1]
Notice: Scope(Class[main]): Integer[1, 1]
Notice: Scope(Class[main]): Integer[1, 1]
Notice: Scope(Class[main]): Integer
Notice: Scope(Class[main]): Integer
Notice: Scope(Class[main]): Float[2, 2]
Notice: Scope(Class[main]): Float[2, 2]
Notice: Scope(Class[main]): Float[2, 2]
Notice: Scope(Class[main]): Float[2, 2]
Notice: Scope(Class[main]): Float
Notice: Scope(Class[main]): Float
Notice: Scope(Class[main]): Boolean
Notice: Scope(Class[main]): Boolean
Notice: Scope(Class[main]): Boolean
Notice: Scope(Class[main]): Boolean
Notice: Scope(Class[main]): Boolean
Notice: Scope(Class[main]): Boolean
Notice: Scope(Class[main]): String[6, 6]
Notice: Scope(Class[main]): String[6, 6]
Notice: Scope(Class[main]): String[6, 6]
Notice: Scope(Class[main]): String[6, 6]
Notice: Scope(Class[main]): String
Notice: Scope(Class[main]): String
Notice: Scope(Class[main]): String[3, 3]
Notice: Scope(Class[main]): String[3, 3]
Notice: Scope(Class[main]): String[3, 3]
Notice: Scope(Class[main]): String[3, 3]
Notice: Scope(Class[main]): String
Notice: Scope(Class[main]): String
Notice: Scope(Class[main]): Regexp[/bar/]
Notice: Scope(Class[main]): Regexp[/bar/]
Notice: Scope(Class[main]): Regexp[/bar/]
Notice: Scope(Class[main]): Regexp[/bar/]
Notice: Scope(Class[main]): Regexp[/bar/]
Notice: Scope(Class[main]): Regexp[/bar/]
Notice: Scope(Class[main]): Undef
Notice: Scope(Class[main]): Undef
Notice: Scope(Class[main]): Undef
Notice: Scope(Class[main]): Undef
Notice: Scope(Class[main]): Undef
Notice: Scope(Class[main]): Undef
Notice: Scope(Class[main]): Default
Notice: Scope(Class[main]): Default
Notice: Scope(Class[main]): Default
Notice: Scope(Class[main]): Default
Notice: Scope(Class[main]): Default
Notice: Scope(Class[main]): Default
Notice: Scope(Class[main]): Tuple[Integer[1, 1], Integer[2, 2], Integer[3, 3]]
Notice: Scope(Class[main]): Tuple[Integer[1, 1], Integer[2, 2], Integer[3, 3]]
Notice: Scope(Class[main]): Array[Integer[1, 3], 3, 3]
Notice: Scope(Class[main]): Array[Integer[1, 3], 3, 3]
Notice: Scope(Class[main]): Array[Integer]
Notice: Scope(Class[main]): Array[Integer]
Notice: Scope(Class[main]): Struct[{foo => String[3, 3], bar => String[3, 3]}]
Notice: Scope(Class[main]): Struct[{foo => String[3, 3], bar => String[3, 3]}]
Notice: Scope(Class[main]): Hash[String[3, 3], String[3, 3], 2, 2]
Notice: Scope(Class[main]): Hash[String[3, 3], String[3, 3], 2, 2]
Notice: Scope(Class[main]): Hash[String, String]
Notice: Scope(Class[main]): Hash[String, String]
Notice: Scope(Class[main]): Type[Tuple[Variant[String[1, 2], Integer[3, 4]], Regexp]]
Notice: Scope(Class[main]): Type[Tuple[Variant[String[1, 2], Integer[3, 4]], Regexp]]
Notice: Scope(Class[main]): Type[Tuple[Variant[String[1, 2], Integer[3, 4]], Regexp]]
Notice: Scope(Class[main]): Type[Tuple[Variant[String[1, 2], Integer[3, 4]], Regexp]]
Notice: Scope(Class[main]): Type[Tuple[Variant[String, Integer], Regexp]]
Notice: Scope(Class[main]): Type[Tuple[Variant[String, Integer], Regexp]]
Notice: Scope(Class[main]): Iterator[Integer[1, 3]]
Notice: Scope(Class[main]): Iterator[Integer[1, 3]]
Notice: Scope(Class[main]): Iterator[Integer[1, 3]]
Notice: Scope(Class[main]): Iterator[Integer[1, 3]]
Notice: Scope(Class[main]): Iterator[Integer]
Notice: Scope(Class[main]): Iterator[Integer]
Notice: Scope(Class[main]): Iterator[Tuple[String[3, 3], Scalar]]
Notice: Scope(Class[main]): Iterator[Tuple[String[3, 3], Scalar]]
Notice: Scope(Class[main]): Iterator[Tuple[String[3, 3], Scalar]]
Notice: Scope(Class[main]): Iterator[Tuple[String[3, 3], Scalar]]
Notice: Scope(Class[main]): Iterator[Tuple[String, Scalar]]
Notice: Scope(Class[main]): Iterator[Tuple[String, Scalar]]
Notice: Scope(Class[main]): Type[Foo]
Notice: Scope(Class[main]): Type[Foo]
Notice: Scope(Class[main]): Type[Foo]
Notice: Scope(Class[main]): Type[Foo]
Notice: Scope(Class[main]): Type[Foo]
Notice: Scope(Class[main]): Type[Foo]
Notice: Scope(Class[main]): Array[0, 0]
Notice: Scope(Class[main]): Array[0, 0]
Notice: Scope(Class[main]): Array[0, 0]
Notice: Scope(Class[main]): Array[0, 0]
Notice: Scope(Class[main]): Array
Notice: Scope(Class[main]): Array
Notice: Scope(Class[main]): Hash[0, 0]
Notice: Scope(Class[main]): Hash[0, 0]
Notice: Scope(Class[main]): Hash[0, 0]
Notice: Scope(Class[main]): Hash[0, 0]
Notice: Scope(Class[main]): Hash
Notice: Scope(Class[main]): Hash
Notice: Scope(Class[main]): Tuple[Integer[1, 1], Integer[2, 2], Integer[3, 3]]
Notice: Scope(Class[main]): Tuple[Integer[1, 1], Integer[2, 2], Integer[3, 3]]
Notice: Scope(Class[main]): Array[Integer[1, 3], 3, 3]
Notice: Scope(Class[main]): Array[Integer[1, 3], 3, 3]
Notice: Scope(Class[main]): Array[Integer]
Notice: Scope(Class[main]): Array[Integer]
Notice: Scope(Class[main]): Tuple[Float[1, 1], Float[2, 2], Float[3, 3]]
Notice: Scope(Class[main]): Tuple[Float[1, 1], Float[2, 2], Float[3, 3]]
Notice: Scope(Class[main]): Array[Float[1, 3], 3, 3]
Notice: Scope(Class[main]): Array[Float[1, 3], 3, 3]
Notice: Scope(Class[main]): Array[Float]
Notice: Scope(Class[main]): Array[Float]
Notice: Scope(Class[main]): Tuple[String[3, 3], String[3, 3], String[4, 4]]
Notice: Scope(Class[main]): Tuple[String[3, 3], String[3, 3], String[4, 4]]
Notice: Scope(Class[main]): Array[String[3, 4], 3, 3]
Notice: Scope(Class[main]): Array[String[3, 4], 3, 3]
Notice: Scope(Class[main]): Array[String]
Notice: Scope(Class[main]): Array[String]
Notice: Scope(Class[main]): Tuple[Integer[1, 1], Float[2, 2], Integer[3, 3]]
Notice: Scope(Class[main]): Tuple[Integer[1, 1], Float[2, 2], Integer[3, 3]]
Notice: Scope(Class[main]): Array[Numeric, 3, 3]
Notice: Scope(Class[main]): Array[Numeric, 3, 3]
Notice: Scope(Class[main]): Array[Numeric]
Notice: Scope(Class[main]): Array[Numeric]
Notice: Scope(Class[main]): Tuple[Type[Type], String[3, 3], Integer[5, 5]]
Notice: Scope(Class[main]): Tuple[Type[Type], String[3, 3], Integer[5, 5]]
Notice: Scope(Class[main]): Array[Any, 3, 3]
Notice: Scope(Class[main]): Array[Any, 3, 3]
Notice: Scope(Class[main]): Array[Any]
Notice: Scope(Class[main]): Array[Any]
Notice: Scope(Class[main]): Tuple[Tuple[Integer[1, 1]], Tuple[Integer[2, 2], Float[3, 3]], Tuple[Integer[4, 4]]]
Notice: Scope(Class[main]): Tuple[Tuple[Integer[1, 1]], Tuple[Integer[2, 2], Float[3, 3]], Tuple[Integer[4, 4]]]
Notice: Scope(Class[main]): Array[Array[Numeric], 3, 3]
Notice: Scope(Class[main]): Array[Array[Numeric], 3, 3]
Notice: Scope(Class[main]): Array[Array[Numeric]]
Notice: Scope(Class[main]): Array[Array[Numeric]]
Notice: Scope(Class[main]): Tuple[Array[0, 0], Hash[0, 0]]
Notice: Scope(Class[main]): Tuple[Array[0, 0], Hash[0, 0]]
Notice: Scope(Class[main]): Array[Data, 2, 2]
Notice: Scope(Class[main]): Array[Data, 2, 2]
Notice: Scope(Class[main]): Array
Notice: Scope(Class[main]): Array
Notice: Scope(Class[main]): Tuple[Type[Class], Type[Class]]
Notice: Scope(Class[main]): Tuple[Type[Class], Type[Class]]
Notice: Scope(Class[main]): Array[Type[Class], 2, 2]
Notice: Scope(Class[main]): Array[Type[Class], 2, 2]
Notice: Scope(Class[main]): Array[Type[Class]]
Notice: Scope(Class[main]): Array[Type[Class]]
Notice: Scope(Class[main]): Tuple[Type[File], Type[File]]
Notice: Scope(Class[main]): Tuple[Type[File], Type[File]]
Notice: Scope(Class[main]): Array[Type[File], 2, 2]
Notice: Scope(Class[main]): Array[Type[File], 2, 2]
Notice: Scope(Class[main]): Array[Type[File]]
Notice: Scope(Class[main]): Array[Type[File]]
Notice: Scope(Class[main]): Tuple[Type[File], Type[Notify]]
Notice: Scope(Class[main]): Tuple[Type[File], Type[Notify]]
Notice: Scope(Class[main]): Array[Type[Resource], 2, 2]
Notice: Scope(Class[main]): Array[Type[Resource], 2, 2]
Notice: Scope(Class[main]): Array[Type[Resource]]
Notice: Scope(Class[main]): Array[Type[Resource]]
Notice: Scope(Class[main]): Tuple[Type[Pattern[/foo/]], Type[Pattern[/bar/]], Type[Pattern[/foo/, /baz/, /cake/]]]
Notice: Scope(Class[main]): Tuple[Type[Pattern[/foo/]], Type[Pattern[/bar/]], Type[Pattern[/foo/, /baz/, /cake/]]]
Notice: Scope(Class[main]): Array[Type[Pattern[/foo/, /baz/, /cake/, /bar/]], 3, 3]
Notice: Scope(Class[main]): Array[Type[Pattern[/foo/, /baz/, /cake/, /bar/]], 3, 3]
Notice: Scope(Class[main]): Array[Type[Pattern[/foo/, /baz/, /cake/, /bar/]]]
Notice: Scope(Class[main]): Array[Type[Pattern[/foo/, /baz/, /cake/, /bar/]]]
Notice: Scope(Class[main]): Tuple[Type[Enum[foo]], Type[Enum[bar]], Type[Enum[baz, cake, foo]]]
Notice: Scope(Class[main]): Tuple[Type[Enum[foo]], Type[Enum[bar]], Type[Enum[baz, cake, foo]]]
Notice: Scope(Class[main]): Array[Type[Enum[bar, baz, cake, foo]], 3, 3]
Notice: Scope(Class[main]): Array[Type[Enum[bar, baz, cake, foo]], 3, 3]
Notice: Scope(Class[main]): Array[Type[Enum[bar, baz, cake, foo]]]
Notice: Scope(Class[main]): Array[Type[Enum[bar, baz, cake, foo]]]
Notice: Scope(Class[main]): Tuple[Type[Variant[String]], Type[Variant[Integer]], Type[Variant[String, Regexp, Type]]]
Notice: Scope(Class[main]): Tuple[Type[Variant[String]], Type[Variant[Integer]], Type[Variant[String, Regexp, Type]]]
Notice: Scope(Class[main]): Array[Type[Variant[String, Regexp, Type, Integer]], 3, 3]
Notice: Scope(Class[main]): Array[Type[Variant[String, Regexp, Type, Integer]], 3, 3]
Notice: Scope(Class[main]): Array[Type[Variant[String, Regexp, Type, Integer]]]
Notice: Scope(Class[main]): Array[Type[Variant[String, Regexp, Type, Integer]]]
Notice: Scope(Class[main]): Tuple[Regexp[/foo/], Regexp[/bar/], Regexp[/baz/]]
Notice: Scope(Class[main]): Tuple[Regexp[/foo/], Regexp[/bar/], Regexp[/baz/]]
Notice: Scope(Class[main]): Array[Regexp, 3, 3]
Notice: Scope(Class[main]): Array[Regexp, 3, 3]
Notice: Scope(Class[main]): Array[Regexp]
Notice: Scope(Class[main]): Array[Regexp]
Notice: Scope(Class[main]): Tuple[Type[Callable[Integer, Callable[Numeric]]], Type[Callable[Numeric, Callable[Integer]]]]
Notice: Scope(Class[main]): Tuple[Type[Callable[Integer, Callable[Numeric]]], Type[Callable[Numeric, Callable[Integer]]]]
Notice: Scope(Class[main]): Array[Type[Callable[Integer, Callable[Numeric]]], 2, 2]
Notice: Scope(Class[main]): Array[Type[Callable[Integer, Callable[Numeric]]], 2, 2]
Notice: Scope(Class[main]): Array[Type[Callable[Integer, Callable[Numeric]]]]
Notice: Scope(Class[main]): Array[Type[Callable[Integer, Callable[Numeric]]]]
Notice: Scope(Class[main]): Tuple[Type[Runtime['C++', 'foo']], Type[Runtime['C++', 'bar']]]
Notice: Scope(Class[main]): Tuple[Type[Runtime['C++', 'foo']], Type[Runtime['C++', 'bar']]]
Notice: Scope(Class[main]): Array[Type[Runtime], 2, 2]
Notice: Scope(Class[main]): Array[Type[Runtime], 2, 2]
Notice: Scope(Class[main]): Array[Type[Runtime]]
Notice: Scope(Class[main]): Array[Type[Runtime]]
Notice: Scope(Class[main]): Tuple[Integer[1, 1], Float[2, 2]]
Notice: Scope(Class[main]): Tuple[Integer[1, 1], Float[2, 2]]
Notice: Scope(Class[main]): Array[Numeric, 2, 2]
Notice: Scope(Class[main]): Array[Numeric, 2, 2]
Notice: Scope(Class[main]): Array[Numeric]
Notice: Scope(Class[main]): Array[Numeric]
Notice: Scope(Class[main]): Tuple[Integer[1, 1], Float[2, 2], String[3, 3], Boolean, Regexp[/bar/]]
Notice: Scope(Class[main]): Tuple[Integer[1, 1], Float[2, 2], String[3, 3], Boolean, Regexp[/bar/]]
Notice: Scope(Class[main]): Array[Scalar, 5, 5]
Notice: Scope(Class[main]): Array[Scalar, 5, 5]
Notice: Scope(Class[main]): Array[Scalar]
Notice: Scope(Class[main]): Array[Scalar]
Notice: Scope(Class[main]): Tuple[Integer[1, 1], Float[2, 2], String[3, 3], Boolean, Regexp[/bar/], Tuple[Integer[1, 1]], Struct[{foo => String[3, 3]}], Undef]
Notice: Scope(Class[main]): Tuple[Integer[1, 1], Float[2, 2], String[3, 3], Boolean, Regexp[/bar/], Tuple[Integer[1, 1]], Struct[{foo => String[3, 3]}], Undef]
Notice: Scope(Class[main]): Array[Data, 8, 8]
Notice: Scope(Class[main]): Array[Data, 8, 8]
Notice: Scope(Class[main]): Array
Notice: Scope(Class[main]): Array
Notice: Scope(Class[main]): Tuple[Integer[1, 1], Float[2, 2], String[3, 3], Boolean, Regexp[/bar/], Tuple[Integer[1, 1]], Struct[{foo => String[3, 3]}], Undef, Default]
Notice: Scope(Class[main]): Tuple[Integer[1, 1], Float[2, 2], String[3, 3], Boolean, Regexp[/bar/], Tuple[Integer[1, 1]], Struct[{foo => String[3, 3]}], Undef, Default]
Notice: Scope(Class[main]): Array[Any, 9, 9]
Notice: Scope(Class[main]): Array[Any, 9, 9]
Notice: Scope(Class[main]): Array[Any]
Notice: Scope(Class[main]): Array[Any]
Notice: Scope(Class[main]): Struct[{foo => String[3, 3], bar => Integer[1, 1]}]
Notice: Scope(Class[main]): Struct[{foo => String[3, 3], bar => Integer[1, 1]}]
Notice: Scope(Class[main]): Hash[String[3, 3], Scalar, 2, 2]
Notice: Scope(Class[main]): Hash[String[3, 3], Scalar, 2, 2]
Notice: Scope(Class[main]): Hash[String, Scalar]
Notice: Scope(Class[main]): Hash[String, Scalar]
Notice: Scope(Class[main]): Hash[Variant[Integer[1, 1], Float[3, 3]], Variant[Integer[2, 2], Float[4, 4]], 2, 2]
Notice: Scope(Class[main]): Hash[Variant[Integer[1, 1], Float[3, 3]], Variant[Integer[2, 2], Float[4, 4]], 2, 2]
Notice: Scope(Class[main]): Hash[Numeric, Numeric, 2, 2]
Notice: Scope(Class[main]): Hash[Numeric, Numeric, 2, 2]
Notice: Scope(Class[main]): Hash[Numeric, Numeric]
Notice: Scope(Class[main]): Hash[Numeric, Numeric]
Notice: Scope(Class[main]): Hash[Boolean, String[3, 3], 2, 2]
Notice: Scope(Class[main]): Hash[Boolean, String[3, 3], 2, 2]
Notice: Scope(Class[main]): Hash[Boolean, String[3, 3], 2, 2]
Notice: Scope(Class[main]): Hash[Boolean, String[3, 3], 2, 2]
Notice: Scope(Class[main]): Hash[Boolean, String]
Notice: Scope(Class[main]): Hash[Boolean, String]
Notice: Scope(Class[main]): Hash[Variant[String[3, 3], Integer[1, 1], Regexp[/bar/]], Variant[Integer[1, 1], Regexp[/two/], String[5, 5]], 3, 3]
Notice: Scope(Class[main]): Hash[Variant[String[3, 3], Integer[1, 1], Regexp[/bar/]], Variant[Integer[1, 1], Regexp[/two/], String[5, 5]], 3, 3]
Notice: Scope(Class[main]): Hash[Scalar, Scalar, 3, 3]
Notice: Scope(Class[main]): Hash[Scalar, Scalar, 3, 3]
Notice: Scope(Class[main]): Hash[Scalar, Scalar]
Notice: Scope(Class[main]): Hash[Scalar, Scalar]
{
  "name": "test",
  "version": 123456789
  "environment": "evaluation",
  "resources": [
    {
      "type": "Stage",
      "title": "main",
      "tags": [
        "stage"
      ],
      "exported": false
    },
    {
      "type": "Class",
      "title": "settings",
      "tags": [
        "class",
        "settings",
        "stage"
      ],
      "exported": false
    },
    {
      "type": "Class",
      "title": "main",
      "tags": [
        "class",
        "main",
        "stage"
      ],
      "exported": false
    }
  ],
  "edges": [
    {
      "source": "Stage[main]",
      "target": "Class[settings]"
    },
    {
      "source": "Stage[main]",
      "target": "Class[main]"
    }
  ],
  "classes": [
    "settings",
    "main"
  ]
}

